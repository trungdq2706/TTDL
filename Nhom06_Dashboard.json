{"paragraphs":[{"text":"%pyspark\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport random\nimport plotly\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom matplotlib.dates import DateFormatter\nfrom plotly.graph_objs import Scatter, Layout\n\nlink_github = \"https://github.com/NguyenTrieu903/Sales_Product_Data_Analysis\"\ntotal_sales_2019 = pd.read_csv(\"https://raw.githubusercontent.com/NguyenTrieu903/Sales_Product_Data_Analysis/main/total_sales_2019.csv\")\nSales_Month = pd.read_csv(\"https://raw.githubusercontent.com/NguyenTrieu903/Sales_Product_Data_Analysis/main/Sales_Month.csv\")\n\n\ndef draw_Donut_Chart(Months, Values):\n    # colors\n    colors = ['#FF0000', '#0000FF', '#FFFF00']\n    # explosion\n    explode = (0.05, 0.05, 0.05)\n    plt.figure(figsize=(4,4.75))\n    # Pie Chart\n    plt.pie(Values, colors=colors, labels=Months,\n        autopct='%1.1f%%', pctdistance=0.5, labeldistance=1,\n        explode=explode, textprops={'color':\"black\", 'fontweight':'bold', 'fontsize':12})\n \n    # draw circle\n    centre_circle = plt.Circle((0, 0), 0.00, fc='white')\n    fig = plt.gcf()\n \n    # Adding Circle in Pie chart\n    fig.gca().add_artist(centre_circle)\n    if 'January' in Months:\n        title_donut = 'Quarter {value} Sales'.format(value = 1)\n    elif 'April' in Months:\n        title_donut = 'Quarter {value} Sales'.format(value = 2)\n    elif 'August' in Months:\n        title_donut = 'Quarter {value} Sales'.format(value = 3)\n    elif 'October' in Months:\n        title_donut = 'Quarter {value} Sales'.format(value = 4)\n    # Adding Title of chart\n    plt.title(title_donut,fontsize=18, fontweight='bold', color='green')\n    plt.tight_layout(rect=[0.0001, 0.0001, 0.95, 0.95])\n \n    # Displaying Chart\n    plt.show()\n    \n    \nsales_by_state_test = total_sales_2019[['Order Date', 'State', 'Sales']]\nsales_by_state_test = sales_by_state_test.reset_index()\nsales_by_state_test = sales_by_state_test.set_index('Order Date')\nsales_by_state_test['Month/Year'] = pd.to_datetime(sales_by_state_test.index).strftime('%m/%Y')\nsales_by_state_test = sales_by_state_test[['Month/Year', 'State', 'Sales']]\nsales_by_state_test.columns = ['Month/Year', 'State', 'SumSales']\nsales_by_state_test = sales_by_state_test.groupby(['Month/Year', 'State'])['SumSales'].sum().reset_index()\nsales_by_state_test = sales_by_state_test[sales_by_state_test['Month/Year'] != '01/2020']\n\npopular_2019 = pd.read_csv(\"https://raw.githubusercontent.com/NguyenTrieu903/Sales_Product_Data_Analysis/main/input/2019_Census_US_Population_Data_By_State_Lat_Long.csv\")\nname_state_usa = pd.read_csv(\"https://raw.githubusercontent.com/NguyenTrieu903/Sales_Product_Data_Analysis/main/input/usa_states.csv\")\nmerged_df = pd.merge(popular_2019, name_state_usa, left_on='STATE', right_on='state_name')[['state_code','state_name','POPESTIMATE2019']]\nmerged_df_sales_popular = pd.merge(sales_by_state_test,merged_df, left_on='State', right_on='state_code')\nmerged_df_sales_popular=merged_df_sales_popular.drop('state_code',axis=1)\n\nfig1 = px.choropleth(merged_df_sales_popular, locations='State', locationmode=\"USA-states\", animation_frame=\"Month/Year\", scope=\"usa\", color='SumSales', title='Total Sales by State in 2019', color_continuous_midpoint=sales_by_state_test[\"SumSales\"].mean(), hover_data=['POPESTIMATE2019'], hover_name='state_name')\\\n.update_layout(title={'x': 0.5, 'y': 0.8, 'font_color': 'blue'})","user":"anonymous","dateUpdated":"2023-05-12T22:44:38+0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true,"editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1683905517722_-1851552216","id":"20230502-120116_822349750","dateCreated":"2023-05-12T22:31:57+0700","dateStarted":"2023-05-12T22:44:38+0700","dateFinished":"2023-05-12T22:44:47+0700","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:20121"},{"title":"","text":"%pyspark\nfig, ax = plt.subplots(figsize=(4, 3.4))\nsns.barplot( \n    y=Sales_Month['Sales'], \n    x=Sales_Month.index, \n    data=Sales_Month,\n    ax=ax)\nplt.tight_layout(rect=[0.001, 0.01, 0.95, 0.95])\nplt.title('Total Sales by Months',fontsize =15,color='green', fontweight='bold')\nplt.ylabel('Sales in USD',fontsize =12,color='blue')\nplt.xlabel('Months',fontsize =12,color='blue')","user":"anonymous","dateUpdated":"2023-05-12T22:44:47+0700","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":3,"editorMode":"ace/mode/python","fontSize":9,"editorHide":true,"title":false,"results":{"1":{"graph":{"mode":"table","height":245,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1683905517722_1005393601","id":"20230426-213716_653408792","dateCreated":"2023-05-12T22:31:57+0700","dateStarted":"2023-05-12T22:44:47+0700","dateFinished":"2023-05-12T22:44:47+0700","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:20122"},{"text":"%pyspark\ndaily_order_pivot = pd.pivot_table(total_sales_2019, index=pd.to_datetime(total_sales_2019['Order Date']).dt.dayofweek, \n                                   values='Order ID', aggfunc='nunique')\ndaily_order_pivot = daily_order_pivot.rename(columns={'Order ID': 'Total Ordered'})\ndaily_order_pivot.index = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\ndaily_order_pivot.index.name = 'day'\ndaily_order_pivot = daily_order_pivot.reset_index()\ndaily_order_pivot = daily_order_pivot.rename(columns={'day': 'Order Date'})\naverage_daily_order = daily_order_pivot['Total Ordered'].mean()\n\nwith plt.style.context('bmh'):\n    plt.figure(figsize=(12, 5.4))\n    sns.lineplot(x='Order Date', y='Total Ordered', data=daily_order_pivot)\n    plt.ticklabel_format(style='plain', axis='y')\n    plt.title(\"Daily Order Trend\", fontsize=20, fontweight='bold', color='green')    \n    plt.xlabel(\"Weekdays\", fontsize=16)\n    plt.ylabel(\"Order\", fontsize=16)\n\n    plt.xticks(range(7), daily_order_pivot['Order Date'])\n    plt.text(daily_order_pivot['Order Date'].iloc[-6], average_daily_order+5, \n             f\"Avg: {average_daily_order:,.2f}\", \n             color='red', fontsize=10, ha='center', va='bottom')\n    plt.axhline(y=average_daily_order, color='red', linestyle='--', linewidth=1)\n    for x, y in zip(daily_order_pivot['Order Date'], daily_order_pivot['Total Ordered']):\n        label = f\"{(y):,}\"\n        plt.annotate(label, (x,y), textcoords='offset points', xytext=(2,4), ha='center')\nplt.show()","user":"anonymous","dateUpdated":"2023-05-12T22:44:47+0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":5,"editorMode":"ace/mode/python","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1683905517723_-1580254044","id":"20230426-211435_1006658064","dateCreated":"2023-05-12T22:31:57+0700","dateStarted":"2023-05-12T22:44:47+0700","dateFinished":"2023-05-12T22:44:48+0700","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:20123"},{"text":"%pyspark\nproduct_order = total_sales_2019.groupby('Product').count().sort_values(by='Quantity Ordered', ascending=False)[:10]\nplt.figure(figsize=(4.55,3.95))\n\nsns.barplot( \n    x=product_order['Quantity Ordered'], \n    y=product_order.index, \n    data=product_order,\n    palette='pastel',\n    linewidth=1)\n\nplt.tight_layout(rect=[0.05, 0.05, 0.95, 0.95])\nplt.title('Top 10 Best Selling Products', fontsize=15, pad=10, loc='right', fontweight='bold', color='green')\nplt.xlabel('Total Quantity Ordered',fontsize =12,color='blue')\nplt.ylabel('Products',fontsize =12,color='blue')\n\nfor i, v in enumerate(product_order['Quantity Ordered']):\n    plt.text(v + 0.5, i + 0.15, str(v), color='black')\n\nplt.show()","user":"anonymous","dateUpdated":"2023-05-12T22:44:48+0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":4,"editorMode":"ace/mode/python","fontSize":9,"editorHide":true,"results":{"0":{"graph":{"mode":"table","height":205.977,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1683905517723_-1588354010","id":"20230426-215906_1567438479","dateCreated":"2023-05-12T22:31:57+0700","dateStarted":"2023-05-12T22:44:48+0700","dateFinished":"2023-05-12T22:44:48+0700","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:20124"},{"text":"%pyspark\nselect = z.select(\"Quarter\", [(\"1\",\"Quarter 1\"),\n                                (\"2\",\"Quarter 2\"),\n                                (\"3\",\"Quarter 3\"),\n                                (\"4\",\"Quarter 4\")])\n                 \nif (select == '1'):\n    y=Sales_Month['Sales'][0:3]\n    Months = ['January', 'February', 'March']\n    y = y.values.tolist()\n    draw_Donut_Chart(Months, y)\nelif (select == '2'):\n    y=Sales_Month['Sales'][3:6]\n    Months = ['April', 'May', 'June']\n    y = y.values.tolist()\n    draw_Donut_Chart(Months, y)\nelif (select == '3'):\n    y=Sales_Month['Sales'][6:9]\n    Months = ['July', 'August', 'September']\n    y = y.values.tolist()\n    draw_Donut_Chart(Months, y)\nelif (select == '4'):\n    y=Sales_Month['Sales'][9:12]\n    Months = ['October', 'November', 'December']\n    y = y.values.tolist()\n    draw_Donut_Chart(Months, y)\n                            ","user":"anonymous","dateUpdated":"2023-05-12T22:44:48+0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":4,"editorMode":"ace/mode/python","fontSize":10,"editorHide":true,"runOnSelectionChange":true,"results":{},"enabled":true},"settings":{"params":{"day":"5","quarter":"2","Quarter":"2"},"forms":{"Quarter":{"type":"Select","options":[{"value":"1","displayName":"Quarter 1","$$hashKey":"object:20239"},{"value":"2","displayName":"Quarter 2","$$hashKey":"object:20240"},{"value":"3","displayName":"Quarter 3","$$hashKey":"object:20241"},{"value":"4","displayName":"Quarter 4","$$hashKey":"object:20242"}],"name":"Quarter","displayName":"Quarter","defaultValue":"","hidden":false,"$$hashKey":"object:20226"}}},"apps":[],"jobName":"paragraph_1683905517723_2053873803","id":"20230421-111552_1834109142","dateCreated":"2023-05-12T22:31:57+0700","dateStarted":"2023-05-12T22:44:48+0700","dateFinished":"2023-05-12T22:44:49+0700","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:20125"},{"text":"%pyspark\ndef plot(plot_dic, height=420, width=800, **kwargs):\n    kwargs['output_type'] = 'div'\n    plot_str = plotly.offline.plot(plot_dic, **kwargs)\n    print('%%angular <div style=\"height: %ipx; width: %spx\"> %s </div>' % (height, width, plot_str))\n\n\nplot(fig1)","user":"anonymous","dateUpdated":"2023-05-12T22:44:49+0700","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":8,"editorMode":"ace/mode/python","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1683905517723_1565399848","id":"20230426-213106_408525471","dateCreated":"2023-05-12T22:31:57+0700","dateStarted":"2023-05-12T22:44:49+0700","dateFinished":"2023-05-12T22:44:49+0700","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:20126"},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2023-05-12T22:44:49+0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1683906289084_-624408663","id":"20230512-224449_1680160029","dateCreated":"2023-05-12T22:44:49+0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:20127"}],"name":"Visual","id":"2HYXD12XV","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":true,"looknfeel":"default","personalizedMode":"false"},"info":{}}